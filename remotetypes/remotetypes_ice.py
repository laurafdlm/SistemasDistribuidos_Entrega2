# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `remotetypes.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module RemoteTypes
_M_RemoteTypes = Ice.openModule('RemoteTypes')
__name__ = 'RemoteTypes'

if 'KeyError' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.KeyError = Ice.createTempClass()
    class KeyError(Ice.UserException):
        def __init__(self, key=''):
            self.key = key

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::RemoteTypes::KeyError'

    _M_RemoteTypes._t_KeyError = IcePy.defineException('::RemoteTypes::KeyError', KeyError, (), False, None, (('key', (), IcePy._t_string, False, 0),))
    KeyError._ice_type = _M_RemoteTypes._t_KeyError

    _M_RemoteTypes.KeyError = KeyError
    del KeyError

if 'IndexError' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.IndexError = Ice.createTempClass()
    class IndexError(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::RemoteTypes::IndexError'

    _M_RemoteTypes._t_IndexError = IcePy.defineException('::RemoteTypes::IndexError', IndexError, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    IndexError._ice_type = _M_RemoteTypes._t_IndexError

    _M_RemoteTypes.IndexError = IndexError
    del IndexError

if 'TypeError' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.TypeError = Ice.createTempClass()
    class TypeError(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::RemoteTypes::TypeError'

    _M_RemoteTypes._t_TypeError = IcePy.defineException('::RemoteTypes::TypeError', TypeError, (), False, None, (('description', (), IcePy._t_string, False, 0),))
    TypeError._ice_type = _M_RemoteTypes._t_TypeError

    _M_RemoteTypes.TypeError = TypeError
    del TypeError

if 'StopIteration' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.StopIteration = Ice.createTempClass()
    class StopIteration(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::RemoteTypes::StopIteration'

    _M_RemoteTypes._t_StopIteration = IcePy.defineException('::RemoteTypes::StopIteration', StopIteration, (), False, None, ())
    StopIteration._ice_type = _M_RemoteTypes._t_StopIteration

    _M_RemoteTypes.StopIteration = StopIteration
    del StopIteration

if 'CancelIteration' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.CancelIteration = Ice.createTempClass()
    class CancelIteration(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::RemoteTypes::CancelIteration'

    _M_RemoteTypes._t_CancelIteration = IcePy.defineException('::RemoteTypes::CancelIteration', CancelIteration, (), False, None, ())
    CancelIteration._ice_type = _M_RemoteTypes._t_CancelIteration

    _M_RemoteTypes.CancelIteration = CancelIteration
    del CancelIteration

if 'TypeName' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.TypeName = Ice.createTempClass()
    class TypeName(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    TypeName.RDict = TypeName("RDict", 0)
    TypeName.RList = TypeName("RList", 1)
    TypeName.RSet = TypeName("RSet", 2)
    TypeName._enumerators = { 0:TypeName.RDict, 1:TypeName.RList, 2:TypeName.RSet }

    _M_RemoteTypes._t_TypeName = IcePy.defineEnum('::RemoteTypes::TypeName', TypeName, (), TypeName._enumerators)

    _M_RemoteTypes.TypeName = TypeName
    del TypeName

_M_RemoteTypes._t_Iterable = IcePy.defineValue('::RemoteTypes::Iterable', Ice.Value, -1, (), False, True, None, ())

if 'IterablePrx' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.IterablePrx = Ice.createTempClass()
    class IterablePrx(Ice.ObjectPrx):

        def next(self, context=None):
            return _M_RemoteTypes.Iterable._op_next.invoke(self, ((), context))

        def nextAsync(self, context=None):
            return _M_RemoteTypes.Iterable._op_next.invokeAsync(self, ((), context))

        def begin_next(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.Iterable._op_next.begin(self, ((), _response, _ex, _sent, context))

        def end_next(self, _r):
            return _M_RemoteTypes.Iterable._op_next.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RemoteTypes.IterablePrx.ice_checkedCast(proxy, '::RemoteTypes::Iterable', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RemoteTypes.IterablePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::Iterable'
    _M_RemoteTypes._t_IterablePrx = IcePy.defineProxy('::RemoteTypes::Iterable', IterablePrx)

    _M_RemoteTypes.IterablePrx = IterablePrx
    del IterablePrx

    _M_RemoteTypes.Iterable = Ice.createTempClass()
    class Iterable(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RemoteTypes::Iterable')

        def ice_id(self, current=None):
            return '::RemoteTypes::Iterable'

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::Iterable'

        def next(self, current=None):
            raise NotImplementedError("servant method 'next' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RemoteTypes._t_IterableDisp)

        __repr__ = __str__

    _M_RemoteTypes._t_IterableDisp = IcePy.defineClass('::RemoteTypes::Iterable', Iterable, (), None, ())
    Iterable._ice_type = _M_RemoteTypes._t_IterableDisp

    Iterable._op_next = IcePy.Operation('next', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_RemoteTypes._t_StopIteration, _M_RemoteTypes._t_CancelIteration))

    _M_RemoteTypes.Iterable = Iterable
    del Iterable

_M_RemoteTypes._t_RType = IcePy.defineValue('::RemoteTypes::RType', Ice.Value, -1, (), False, True, None, ())

if 'RTypePrx' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.RTypePrx = Ice.createTempClass()
    class RTypePrx(Ice.ObjectPrx):

        def identifier(self, context=None):
            return _M_RemoteTypes.RType._op_identifier.invoke(self, ((), context))

        def identifierAsync(self, context=None):
            return _M_RemoteTypes.RType._op_identifier.invokeAsync(self, ((), context))

        def begin_identifier(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RType._op_identifier.begin(self, ((), _response, _ex, _sent, context))

        def end_identifier(self, _r):
            return _M_RemoteTypes.RType._op_identifier.end(self, _r)

        def remove(self, item, context=None):
            return _M_RemoteTypes.RType._op_remove.invoke(self, ((item, ), context))

        def removeAsync(self, item, context=None):
            return _M_RemoteTypes.RType._op_remove.invokeAsync(self, ((item, ), context))

        def begin_remove(self, item, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RType._op_remove.begin(self, ((item, ), _response, _ex, _sent, context))

        def end_remove(self, _r):
            return _M_RemoteTypes.RType._op_remove.end(self, _r)

        def length(self, context=None):
            return _M_RemoteTypes.RType._op_length.invoke(self, ((), context))

        def lengthAsync(self, context=None):
            return _M_RemoteTypes.RType._op_length.invokeAsync(self, ((), context))

        def begin_length(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RType._op_length.begin(self, ((), _response, _ex, _sent, context))

        def end_length(self, _r):
            return _M_RemoteTypes.RType._op_length.end(self, _r)

        def contains(self, item, context=None):
            return _M_RemoteTypes.RType._op_contains.invoke(self, ((item, ), context))

        def containsAsync(self, item, context=None):
            return _M_RemoteTypes.RType._op_contains.invokeAsync(self, ((item, ), context))

        def begin_contains(self, item, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RType._op_contains.begin(self, ((item, ), _response, _ex, _sent, context))

        def end_contains(self, _r):
            return _M_RemoteTypes.RType._op_contains.end(self, _r)

        def hash(self, context=None):
            return _M_RemoteTypes.RType._op_hash.invoke(self, ((), context))

        def hashAsync(self, context=None):
            return _M_RemoteTypes.RType._op_hash.invokeAsync(self, ((), context))

        def begin_hash(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RType._op_hash.begin(self, ((), _response, _ex, _sent, context))

        def end_hash(self, _r):
            return _M_RemoteTypes.RType._op_hash.end(self, _r)

        def iter(self, context=None):
            return _M_RemoteTypes.RType._op_iter.invoke(self, ((), context))

        def iterAsync(self, context=None):
            return _M_RemoteTypes.RType._op_iter.invokeAsync(self, ((), context))

        def begin_iter(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RType._op_iter.begin(self, ((), _response, _ex, _sent, context))

        def end_iter(self, _r):
            return _M_RemoteTypes.RType._op_iter.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RemoteTypes.RTypePrx.ice_checkedCast(proxy, '::RemoteTypes::RType', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RemoteTypes.RTypePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RType'
    _M_RemoteTypes._t_RTypePrx = IcePy.defineProxy('::RemoteTypes::RType', RTypePrx)

    _M_RemoteTypes.RTypePrx = RTypePrx
    del RTypePrx

    _M_RemoteTypes.RType = Ice.createTempClass()
    class RType(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RemoteTypes::RType')

        def ice_id(self, current=None):
            return '::RemoteTypes::RType'

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RType'

        def identifier(self, current=None):
            raise NotImplementedError("servant method 'identifier' not implemented")

        def remove(self, item, current=None):
            raise NotImplementedError("servant method 'remove' not implemented")

        def length(self, current=None):
            raise NotImplementedError("servant method 'length' not implemented")

        def contains(self, item, current=None):
            raise NotImplementedError("servant method 'contains' not implemented")

        def hash(self, current=None):
            raise NotImplementedError("servant method 'hash' not implemented")

        def iter(self, current=None):
            raise NotImplementedError("servant method 'iter' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RemoteTypes._t_RTypeDisp)

        __repr__ = __str__

    _M_RemoteTypes._t_RTypeDisp = IcePy.defineClass('::RemoteTypes::RType', RType, (), None, ())
    RType._ice_type = _M_RemoteTypes._t_RTypeDisp

    RType._op_identifier = IcePy.Operation('identifier', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    RType._op_remove = IcePy.Operation('remove', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_RemoteTypes._t_KeyError,))
    RType._op_length = IcePy.Operation('length', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    RType._op_contains = IcePy.Operation('contains', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    RType._op_hash = IcePy.Operation('hash', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_long, False, 0), ())
    RType._op_iter = IcePy.Operation('iter', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_RemoteTypes._t_IterablePrx, False, 0), ())

    _M_RemoteTypes.RType = RType
    del RType

_M_RemoteTypes._t_RDict = IcePy.defineValue('::RemoteTypes::RDict', Ice.Value, -1, (), False, True, None, ())

if 'RDictPrx' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.RDictPrx = Ice.createTempClass()
    class RDictPrx(_M_RemoteTypes.RTypePrx):

        def setItem(self, key, item, context=None):
            return _M_RemoteTypes.RDict._op_setItem.invoke(self, ((key, item), context))

        def setItemAsync(self, key, item, context=None):
            return _M_RemoteTypes.RDict._op_setItem.invokeAsync(self, ((key, item), context))

        def begin_setItem(self, key, item, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RDict._op_setItem.begin(self, ((key, item), _response, _ex, _sent, context))

        def end_setItem(self, _r):
            return _M_RemoteTypes.RDict._op_setItem.end(self, _r)

        def getItem(self, key, context=None):
            return _M_RemoteTypes.RDict._op_getItem.invoke(self, ((key, ), context))

        def getItemAsync(self, key, context=None):
            return _M_RemoteTypes.RDict._op_getItem.invokeAsync(self, ((key, ), context))

        def begin_getItem(self, key, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RDict._op_getItem.begin(self, ((key, ), _response, _ex, _sent, context))

        def end_getItem(self, _r):
            return _M_RemoteTypes.RDict._op_getItem.end(self, _r)

        def pop(self, key, context=None):
            return _M_RemoteTypes.RDict._op_pop.invoke(self, ((key, ), context))

        def popAsync(self, key, context=None):
            return _M_RemoteTypes.RDict._op_pop.invokeAsync(self, ((key, ), context))

        def begin_pop(self, key, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RDict._op_pop.begin(self, ((key, ), _response, _ex, _sent, context))

        def end_pop(self, _r):
            return _M_RemoteTypes.RDict._op_pop.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RemoteTypes.RDictPrx.ice_checkedCast(proxy, '::RemoteTypes::RDict', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RemoteTypes.RDictPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RDict'
    _M_RemoteTypes._t_RDictPrx = IcePy.defineProxy('::RemoteTypes::RDict', RDictPrx)

    _M_RemoteTypes.RDictPrx = RDictPrx
    del RDictPrx

    _M_RemoteTypes.RDict = Ice.createTempClass()
    class RDict(_M_RemoteTypes.RType):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RemoteTypes::RDict', '::RemoteTypes::RType')

        def ice_id(self, current=None):
            return '::RemoteTypes::RDict'

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RDict'

        def setItem(self, key, item, current=None):
            raise NotImplementedError("servant method 'setItem' not implemented")

        def getItem(self, key, current=None):
            raise NotImplementedError("servant method 'getItem' not implemented")

        def pop(self, key, current=None):
            raise NotImplementedError("servant method 'pop' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RemoteTypes._t_RDictDisp)

        __repr__ = __str__

    _M_RemoteTypes._t_RDictDisp = IcePy.defineClass('::RemoteTypes::RDict', RDict, (), None, (_M_RemoteTypes._t_RTypeDisp,))
    RDict._ice_type = _M_RemoteTypes._t_RDictDisp

    RDict._op_setItem = IcePy.Operation('setItem', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    RDict._op_getItem = IcePy.Operation('getItem', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_RemoteTypes._t_KeyError,))
    RDict._op_pop = IcePy.Operation('pop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_RemoteTypes._t_KeyError,))

    _M_RemoteTypes.RDict = RDict
    del RDict

_M_RemoteTypes._t_RList = IcePy.defineValue('::RemoteTypes::RList', Ice.Value, -1, (), False, True, None, ())

if 'RListPrx' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.RListPrx = Ice.createTempClass()
    class RListPrx(_M_RemoteTypes.RTypePrx):

        def append(self, item, context=None):
            return _M_RemoteTypes.RList._op_append.invoke(self, ((item, ), context))

        def appendAsync(self, item, context=None):
            return _M_RemoteTypes.RList._op_append.invokeAsync(self, ((item, ), context))

        def begin_append(self, item, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RList._op_append.begin(self, ((item, ), _response, _ex, _sent, context))

        def end_append(self, _r):
            return _M_RemoteTypes.RList._op_append.end(self, _r)

        def pop(self, index=Ice.Unset, context=None):
            return _M_RemoteTypes.RList._op_pop.invoke(self, ((index, ), context))

        def popAsync(self, index, context=None):
            return _M_RemoteTypes.RList._op_pop.invokeAsync(self, ((index, ), context))

        def begin_pop(self, index, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RList._op_pop.begin(self, ((index, ), _response, _ex, _sent, context))

        def end_pop(self, _r):
            return _M_RemoteTypes.RList._op_pop.end(self, _r)

        def getItem(self, index, context=None):
            return _M_RemoteTypes.RList._op_getItem.invoke(self, ((index, ), context))

        def getItemAsync(self, index, context=None):
            return _M_RemoteTypes.RList._op_getItem.invokeAsync(self, ((index, ), context))

        def begin_getItem(self, index, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RList._op_getItem.begin(self, ((index, ), _response, _ex, _sent, context))

        def end_getItem(self, _r):
            return _M_RemoteTypes.RList._op_getItem.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RemoteTypes.RListPrx.ice_checkedCast(proxy, '::RemoteTypes::RList', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RemoteTypes.RListPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RList'
    _M_RemoteTypes._t_RListPrx = IcePy.defineProxy('::RemoteTypes::RList', RListPrx)

    _M_RemoteTypes.RListPrx = RListPrx
    del RListPrx

    _M_RemoteTypes.RList = Ice.createTempClass()
    class RList(_M_RemoteTypes.RType):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RemoteTypes::RList', '::RemoteTypes::RType')

        def ice_id(self, current=None):
            return '::RemoteTypes::RList'

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RList'

        def append(self, item, current=None):
            raise NotImplementedError("servant method 'append' not implemented")

        def pop(self, index, current=None):
            raise NotImplementedError("servant method 'pop' not implemented")

        def getItem(self, index, current=None):
            raise NotImplementedError("servant method 'getItem' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RemoteTypes._t_RListDisp)

        __repr__ = __str__

    _M_RemoteTypes._t_RListDisp = IcePy.defineClass('::RemoteTypes::RList', RList, (), None, (_M_RemoteTypes._t_RTypeDisp,))
    RList._ice_type = _M_RemoteTypes._t_RListDisp

    RList._op_append = IcePy.Operation('append', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    RList._op_pop = IcePy.Operation('pop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, True, 1),), (), ((), IcePy._t_string, False, 0), (_M_RemoteTypes._t_IndexError,))
    RList._op_getItem = IcePy.Operation('getItem', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_RemoteTypes._t_IndexError,))

    _M_RemoteTypes.RList = RList
    del RList

_M_RemoteTypes._t_RSet = IcePy.defineValue('::RemoteTypes::RSet', Ice.Value, -1, (), False, True, None, ())

if 'RSetPrx' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.RSetPrx = Ice.createTempClass()
    class RSetPrx(_M_RemoteTypes.RTypePrx):

        def add(self, item, context=None):
            return _M_RemoteTypes.RSet._op_add.invoke(self, ((item, ), context))

        def addAsync(self, item, context=None):
            return _M_RemoteTypes.RSet._op_add.invokeAsync(self, ((item, ), context))

        def begin_add(self, item, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RSet._op_add.begin(self, ((item, ), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_RemoteTypes.RSet._op_add.end(self, _r)

        def pop(self, context=None):
            return _M_RemoteTypes.RSet._op_pop.invoke(self, ((), context))

        def popAsync(self, context=None):
            return _M_RemoteTypes.RSet._op_pop.invokeAsync(self, ((), context))

        def begin_pop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.RSet._op_pop.begin(self, ((), _response, _ex, _sent, context))

        def end_pop(self, _r):
            return _M_RemoteTypes.RSet._op_pop.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RemoteTypes.RSetPrx.ice_checkedCast(proxy, '::RemoteTypes::RSet', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RemoteTypes.RSetPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RSet'
    _M_RemoteTypes._t_RSetPrx = IcePy.defineProxy('::RemoteTypes::RSet', RSetPrx)

    _M_RemoteTypes.RSetPrx = RSetPrx
    del RSetPrx

    _M_RemoteTypes.RSet = Ice.createTempClass()
    class RSet(_M_RemoteTypes.RType):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RemoteTypes::RSet', '::RemoteTypes::RType')

        def ice_id(self, current=None):
            return '::RemoteTypes::RSet'

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::RSet'

        def add(self, item, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def pop(self, current=None):
            raise NotImplementedError("servant method 'pop' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RemoteTypes._t_RSetDisp)

        __repr__ = __str__

    _M_RemoteTypes._t_RSetDisp = IcePy.defineClass('::RemoteTypes::RSet', RSet, (), None, (_M_RemoteTypes._t_RTypeDisp,))
    RSet._ice_type = _M_RemoteTypes._t_RSetDisp

    RSet._op_add = IcePy.Operation('add', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    RSet._op_pop = IcePy.Operation('pop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_RemoteTypes._t_KeyError,))

    _M_RemoteTypes.RSet = RSet
    del RSet

_M_RemoteTypes._t_Factory = IcePy.defineValue('::RemoteTypes::Factory', Ice.Value, -1, (), False, True, None, ())

if 'FactoryPrx' not in _M_RemoteTypes.__dict__:
    _M_RemoteTypes.FactoryPrx = Ice.createTempClass()
    class FactoryPrx(Ice.ObjectPrx):

        def get(self, typeName, identifier=Ice.Unset, context=None):
            return _M_RemoteTypes.Factory._op_get.invoke(self, ((typeName, identifier), context))

        def getAsync(self, typeName, identifier, context=None):
            return _M_RemoteTypes.Factory._op_get.invokeAsync(self, ((typeName, identifier), context))

        def begin_get(self, typeName, identifier, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteTypes.Factory._op_get.begin(self, ((typeName, identifier), _response, _ex, _sent, context))

        def end_get(self, _r):
            return _M_RemoteTypes.Factory._op_get.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RemoteTypes.FactoryPrx.ice_checkedCast(proxy, '::RemoteTypes::Factory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RemoteTypes.FactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::Factory'
    _M_RemoteTypes._t_FactoryPrx = IcePy.defineProxy('::RemoteTypes::Factory', FactoryPrx)

    _M_RemoteTypes.FactoryPrx = FactoryPrx
    del FactoryPrx

    _M_RemoteTypes.Factory = Ice.createTempClass()
    class Factory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RemoteTypes::Factory')

        def ice_id(self, current=None):
            return '::RemoteTypes::Factory'

        @staticmethod
        def ice_staticId():
            return '::RemoteTypes::Factory'

        def get(self, typeName, identifier, current=None):
            raise NotImplementedError("servant method 'get' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RemoteTypes._t_FactoryDisp)

        __repr__ = __str__

    _M_RemoteTypes._t_FactoryDisp = IcePy.defineClass('::RemoteTypes::Factory', Factory, (), None, ())
    Factory._ice_type = _M_RemoteTypes._t_FactoryDisp

    Factory._op_get = IcePy.Operation('get', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_RemoteTypes._t_TypeName, False, 0), ((), IcePy._t_string, True, 1)), (), ((), _M_RemoteTypes._t_RTypePrx, False, 0), ())

    _M_RemoteTypes.Factory = Factory
    del Factory

# End of module RemoteTypes
